//+------------------------------------------------------------------+
//|                                          OrientHeightz v1.01.mq4 |
//|                       Copyright 2022 Santos Family Holdings LLC. |
//|                           http://www.SantosFamilyHoldingsLLC.com |
//+------------------------------------------------------------------+
#property copyright   "Copyright 2022 Santos Family Holdings LLC."
#property link        "http://www.SantosFamilyHoldingsLLC.com"
#property description "OrientHeightz v1.01.mq4"

//--- Magic number to identify transactions related to this EA
#define MAGICMA  20131111

// Definition of an hour. This is necessary for a drop down menu for hours input.
enum ENUM_HOUR
  {
   h00 = 00, // 00:00
   h01 = 01, // 01:00
   h02 = 02, // 02:00
   h03 = 03, // 03:00
   h04 = 04, // 04:00
   h05 = 05, // 05:00
   h06 = 06, // 06:00
   h07 = 07, // 07:00
   h08 = 08, // 08:00
   h09 = 09, // 09:00
   h10 = 10, // 10:00
   h11 = 11, // 11:00
   h12 = 12, // 12:00
   h13 = 13, // 13:00
   h14 = 14, // 14:00
   h15 = 15, // 15:00
   h16 = 16, // 16:00
   h17 = 17, // 17:00
   h18 = 18, // 18:00
   h19 = 19, // 19:00
   h20 = 20, // 20:00
   h21 = 21, // 21:00
   h22 = 22, // 22:00
   h23 = 23, // 23:00
  };



//--- Inputs
input double Lots          =0.01;          // Lot size

input ENUM_HOUR StartHour = h14; // First operation hour
input ENUM_HOUR LastHour = h23; // Last operation hour


input int    MovingPeriodOne         = 5;    // Moving Average period One
input int    MovingPeriodTwo         = 15;   // Moving Average period two
input int    MovingPeriodThree       = 30;   // Moving Average period three
input int    MovingPeriodFour        = 60;   // Moving Average period four
input int    MovingPeriodFive        = 200;  // Moving Average period five
input int    EMA1_MovingShiftOne     = 1;    // MovingPeriodOne Average shift one
input int    EMA1_MovingShiftTwo     = 2;    // MovingPeriodOne Average shift one
input int    EMA1_MovingShiftThree   = 3;    // MovingPeriodOne Average shift one

input double Adx_Min                 = 22.0; // Minimum ADX Value
input int    ADX__Average_Period     = 15;   // ADX Period
input int    ADX_MovingShiftOne      = 1;    // ADX Average shift one
input int    ADX_MovingShiftTwo      = 0;    // ADX Average shift one
input int    ADX_MovingShiftThree    = 0;    // ADX Average shift one

input int    ATR_Min_Level           = 5;   // ATR Level
input int    ATR_Averaging_Period    = 10;   // ATR Averaging period
input int    ATR_MovingShiftOne      = 1;    // ATR Average shift one
input int    ATR_MovingShiftTwo      = 0;    // ATR Average shift one
input int    ATR_MovingShiftThree    = 0;    // ATR Average shift one

input int    Volume_MovingShiftOne   = 0;    // Volume Average shift one
input int    Volume_MovingShiftTwo   = 1;    // Volume Average shift one
input int    Volume_MovingShiftThree = 0;    // Volume Average shift one

input int    TakeProfit              = 400000;   // Take Profit in Points


//---News Filter Inputs
input  int   AfterNewsStop           = 0; // Indent after News, minuts
input  int   BeforeNewsStop          = 0; // Indent before News, minuts
input int    NewsSleepTime           = 10; //News sleep time in minutes
input bool   NewsLight               = false; // Enable light news
input bool   NewsMedium              = false; // Enable medium news
input bool   NewsHard                = false; // Enable hard news
input int    offset                  = -5;     // Your Time Zone, GMT (for news)
input string NewsSymb                = "USD"; //Currency to display the news (empty - only the current currencies)
input bool   DrawLines               = false;       // Draw lines on the chart
input bool   Next                    = false;      // Draw only the future of news line
input bool   Signal                  = false;      // Signals on the upcoming news
input int    Upd                     = 24;      // Period news updates in hours

color highc          = clrRed;     // Colour important news
color mediumc        = clrBlue;    // Colour medium news
color lowc           = clrLime;    // The color of weak news
int   Style          = 2;          // Line style

bool  Vhigh          = false;
bool  Vmedium        = false;
bool  Vlow           = false;
int   MinBefore=0;
int   MinAfter=0;

int NomNews=0;
string NewsArr[4][1000];
int Now=0;
datetime LastUpd;
string str1;

//--- Other parameters and variables
int ThisBarTrade           =  0;


//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   if(StringLen(NewsSymb)>1)
      str1=NewsSymb;
   else
      str1=Symbol();

   Vhigh=NewsHard;
   Vmedium=NewsMedium;
   Vlow=NewsLight;

   MinBefore=BeforeNewsStop;
   MinAfter=AfterNewsStop;

   if(CheckActiveHours())
      Print("Trading enabled");
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   ObjectsDeleteAll(0,OBJ_VLINE);
  }
//+------------------------------------------------------------------+
//| Adjust Trading Hours                                             |
//+------------------------------------------------------------------+
bool CheckActiveHours()
  {
// Set operations disabled by default.
   bool OperationsAllowed = false;
// Check if the current hour is between the allowed hours of operations. If so, return true.
   if((StartHour == LastHour) && (Hour() == StartHour))
      OperationsAllowed = true;
   if((StartHour < LastHour) && (Hour() >= StartHour) && (Hour() <= LastHour))
      OperationsAllowed = true;
   if((StartHour > LastHour) && (((Hour() >= LastHour) && (Hour() <= 23)) || ((Hour() <= StartHour) && (Hour() > 0))))
      OperationsAllowed = true;
   return OperationsAllowed;
  }

//+------------------------------------------------------------------+
//| Calculate open positions                                         |
//+------------------------------------------------------------------+
int CalculateCurrentOrders(string symbol)
  {
   int buys=0,sells=0;
//---
   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol() && OrderMagicNumber()==MAGICMA)
        {
         if(OrderType()==OP_BUY)
            buys++;
         if(OrderType()==OP_SELL)
            sells++;
        }
     }
//--- return orders volume
   if(buys>0)
      return(buys);
   else
      return(-sells);
  }
//+------------------------------------------------------------------+
//|Check for previous order close price                               |
//+------------------------------------------------------------------+
double checkPreviousClosePrice()
  {
   for(int i =0; i < OrdersHistoryTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_HISTORY)==true)
        {
         double iOrderClosePrice=OrderClosePrice();
         if(iOrderClosePrice >= 0)
            continue;
        }
     }
   return iOrderClosePrice;
  }
//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+
void CheckForOpen()
  {
   if(CheckActiveHours())
     {
      //--- Initialize variables
      int    res;

      //--- Get Volume shift 1 Data
      double  Volume1 = iOBV(
                           NULL,           // symbol
                           PERIOD_M1,        // timeframe
                           PRICE_CLOSE,    // applied price
                           Volume_MovingShiftOne // shift
                        );

      //--- Get Volume Shift 2 Data
      double  Volume2 =  iOBV(
                            NULL,           // symbol
                            PERIOD_M1,        // timeframe
                            PRICE_CLOSE,    // applied price
                            Volume_MovingShiftTwo             // shift
                         );

      //--- Get Volume Shift 3 Data
      double  Volume3 = iOBV(
                           NULL,           // symbol
                           PERIOD_M1,        // timeframe
                           PRICE_CLOSE,    // applied price
                           Volume_MovingShiftThree             // shift
                        );


      //--- Get ADX +D Data
      double  ADX_MODE_PLUSDI_Level = iADX(
                                         NULL,  // symbol
                                         PERIOD_M1,    // timeframe
                                         ADX__Average_Period,        // averaging period
                                         PRICE_CLOSE, // applied price
                                         MODE_PLUSDI,          // line index
                                         0          // shift
                                      );

      //--- Get ADX -D Data
      double  ADX_MINUSDI_Level = iADX(
                                     NULL,  // symbol
                                     PERIOD_M1,    // timeframe
                                     ADX__Average_Period,        // averaging period
                                     PRICE_CLOSE, // applied price
                                     MODE_MINUSDI,          // line index
                                     0          // shift
                                  );

      //--- Get ADX main line Data
      double  ADX_Level = iADX(
                             NULL,  // symbol
                             PERIOD_M1,    // timeframe
                             ADX__Average_Period,        // averaging period
                             PRICE_CLOSE, // applied price
                             MODE_MAIN,          // line index
                             0          // shift
                          );

      //--- Get ATR Data
      double ATR_Level = iATR(
                            NULL,     // symbol
                            PERIOD_M1,  // timeframe
                            ATR_Averaging_Period,     // averaging period
                            0       // shift
                         );

      //--- Get ADX Shift 1 Data
      double  ADX_Levelshift1 = iADX(
                                   NULL,  // symbol
                                   PERIOD_M1,    // timeframe
                                   ADX__Average_Period,        // averaging period
                                   PRICE_CLOSE, // applied price
                                   MODE_MAIN,          // line index
                                   ADX_MovingShiftOne          // shift
                                );

      //--- Get ATR Shift Data
      double ATR_Levelshift1 = iATR(
                                  NULL,     // symbol
                                  PERIOD_M1,  // timeframe
                                  ATR_Averaging_Period,     // averaging period
                                  ATR_MovingShiftOne       // shift
                               );
      //--- Get ADX Shift 2 Data
      double  ADX_Levelshift2 = iADX(
                                   NULL,  // symbol
                                   PERIOD_M1,    // timeframe
                                   ADX__Average_Period,        // averaging period
                                   PRICE_CLOSE, // applied price
                                   MODE_MAIN,          // line index
                                   ADX_MovingShiftTwo          // shift
                                );

      //--- Get ATR Shift 2 Data
      double ATR_Levelshift2 = iATR(
                                  NULL,     // symbol
                                  PERIOD_M1,  // timeframe
                                  ATR_Averaging_Period,     // averaging period
                                  ATR_MovingShiftTwo       // shift
                               );

      //--- Get ADX Shift 3 Data
      double  ADX_Levelshift3 = iADX(
                                   NULL,  // symbol
                                   PERIOD_M1,    // timeframe
                                   ADX__Average_Period,        // averaging period
                                   PRICE_CLOSE, // applied price
                                   MODE_MAIN,          // line index
                                   ADX_MovingShiftThree          // shift
                                );

      //--- Get ATR Shift 3 Data
      double ATR_Levelshift3 = iATR(
                                  NULL,     // symbol
                                  PERIOD_M1,  // timeframe
                                  ATR_Averaging_Period,     // averaging period
                                  ATR_MovingShiftThree       // shift
                               );

      //--- get Moving Average
      double fiveminEMA = iMA(NULL,PERIOD_M1,MovingPeriodOne,0,MODE_EMA,PRICE_CLOSE,0);
      double fifteenMinEMa = iMA(NULL,PERIOD_M1,MovingPeriodTwo,0,MODE_EMA,PRICE_CLOSE,0);
      double thirtyMinEMA = iMA(NULL,PERIOD_M1,MovingPeriodThree,0,MODE_EMA,PRICE_CLOSE,0);
      double sixtyMinEMA = iMA(NULL,PERIOD_M1,MovingPeriodFour,0,MODE_EMA,PRICE_CLOSE,0);
      double fourHourEMA = iMA(NULL,PERIOD_M1,MovingPeriodFive,0,MODE_EMA,PRICE_CLOSE,0);
      double fiveminEMAShift1 = iMA(NULL,PERIOD_M1,MovingPeriodOne,EMA1_MovingShiftOne,MODE_EMA,PRICE_CLOSE,0);
      double fiveminEMAShift2 = iMA(NULL,PERIOD_M1,MovingPeriodOne,EMA1_MovingShiftTwo,MODE_EMA,PRICE_CLOSE,0);
      double fiveminEMAShift3 = iMA(NULL,PERIOD_M1,MovingPeriodOne,EMA1_MovingShiftThree,MODE_EMA,PRICE_CLOSE,0);

      //--- Allow EA to handle 3 and 5 digit symbols
      int digits_adjust=1;
      if(Digits==3 || Digits==5)
         digits_adjust=10;
      double adjusted_point= Point*digits_adjust;

      //--- Set initial Stop loss
      double trailing_stop_SELL_set = fifteenMinEMa + MathAbs(Ask - Bid);
      double trailing_stop_Buy_set = fifteenMinEMa;

      //--- Set Take Profit
      double TakeProfit_SELL_set = NormalizeDouble(Bid-TakeProfit*adjusted_point,Digits);
      double TakeProfit_Buy_set = NormalizeDouble(Ask+TakeProfit*adjusted_point,Digits);



      if(Bars != ThisBarTrade)
        {
         ThisBarTrade = Bars;  // Triggers the initial trade opportunity on current bar

         //--- SELL conditions
         if(fiveminEMA < fourHourEMA
            && fiveminEMA < fifteenMinEMa
            && fifteenMinEMa < thirtyMinEMA
            && thirtyMinEMA < sixtyMinEMA
            && fiveminEMA < fiveminEMAShift1
            //&& fiveminEMAShift1 < fiveminEMAShift2
            //&& fiveminEMAShift2 < fiveminEMAShift3
            && ATR_Level > ATR_Min_Level
            && ATR_Level > ATR_Levelshift1
            //&& ATR_Levelshift1 > ATR_Levelshift2
            //&& ATR_Levelshift2 > ATR_Levelshift3
            && ADX_Level > ATR_Min_Level
            && ADX_Level > ADX_Levelshift1
            //&& ADX_Levelshift1 >ADX_Levelshift2
            //&& ADX_Levelshift2 >ADX_Levelshift3
            && ADX_MINUSDI_Level > ADX_MODE_PLUSDI_Level
            && Volume1 > Volume2
            //&& Volume2 > Volume3
            && Open[0] < Ask
           )
           {
            res=OrderSend(Symbol(),OP_SELL,Lots,Bid,3,trailing_stop_SELL_set,TakeProfit_SELL_set,"",MAGICMA,0,Red);
            Print(" Sell trade:",res," placed at Bid price of:",Bid);
            return;
           }
         else
           {
            //--- BUY conditions
            if(fiveminEMA > fourHourEMA
               && fiveminEMA > fifteenMinEMa
               && fifteenMinEMa > thirtyMinEMA
               && thirtyMinEMA > sixtyMinEMA
               && fiveminEMA > fiveminEMAShift1
               //&& fiveminEMAShift1 > fiveminEMAShift2
               //&& fiveminEMAShift2 > fiveminEMAShift3
               && ATR_Level > ATR_Min_Level
               && ATR_Level > ATR_Levelshift1
               //&& ATR_Levelshift1 > ATR_Levelshift2
               //&& ATR_Levelshift2 > ATR_Levelshift3
               && ADX_Level > ATR_Min_Level
               && ADX_Level > ADX_Levelshift1
               //&& ADX_Levelshift1 >ADX_Levelshift2
               //&& ADX_Levelshift2 >ADX_Levelshift3
               && ADX_MODE_PLUSDI_Level > ADX_MINUSDI_Level
               && Volume1 > Volume2
               //&& Volume2 > Volume3
               && Open[0] < Ask)
              {
               res=OrderSend(Symbol(),OP_BUY,Lots,Ask,3,trailing_stop_Buy_set,TakeProfit_Buy_set,"",MAGICMA,0,Blue);
               Alert(" Buy trade:",res," placed at Ask price of:",Ask);
               return;
              }
           }
        }

      if(Bars == ThisBarTrade && Bid > checkPreviousClosePrice() && ATR_Level) //Triggers additional BUY oportunities on current bar above the last trades closing price
        {
         if(fiveminEMA > fourHourEMA
               && fiveminEMA > fifteenMinEMa
               && fifteenMinEMa > thirtyMinEMA
               && thirtyMinEMA > sixtyMinEMA
               && fiveminEMA > fiveminEMAShift1
               //&& fiveminEMAShift1 > fiveminEMAShift2
               //&& fiveminEMAShift2 > fiveminEMAShift3
               && ATR_Level > ATR_Min_Level
               && ATR_Level > ATR_Levelshift1
               //&& ATR_Levelshift1 > ATR_Levelshift2
               //&& ATR_Levelshift2 > ATR_Levelshift3
               && ADX_Level > ATR_Min_Level
               && ADX_Level > ADX_Levelshift1
               //&& ADX_Levelshift1 >ADX_Levelshift2
               //&& ADX_Levelshift2 >ADX_Levelshift3
               && ADX_MODE_PLUSDI_Level > ADX_MINUSDI_Level
               && Volume1 > Volume2
               //&& Volume2 > Volume3
               && Open[0] < Ask
           )
           {
            res=OrderSend(Symbol(),OP_BUY,Lots,Ask,3,trailing_stop_Buy_set,TakeProfit_Buy_set,"",MAGICMA,0,Blue);
            Alert(" Buy trade:",res," placed at Ask price of:",Ask);
            return;
           }
        }

      if(Bars == ThisBarTrade && Ask < checkPreviousClosePrice()  && ATR_Level) //Triggers additional SELL oportunities on current bar below the last trades closing price
        {
         if(fiveminEMA < fourHourEMA
            && fiveminEMA < fifteenMinEMa
            && fifteenMinEMa < thirtyMinEMA
            && thirtyMinEMA < sixtyMinEMA
            && fiveminEMA < fiveminEMAShift1
            //&& fiveminEMAShift1 < fiveminEMAShift2
            //&& fiveminEMAShift2 < fiveminEMAShift3
            && ATR_Level > ATR_Min_Level
            && ATR_Level > ATR_Levelshift1
            //&& ATR_Levelshift1 > ATR_Levelshift2
            //&& ATR_Levelshift2 > ATR_Levelshift3
            && ADX_Level > ATR_Min_Level
            && ADX_Level > ADX_Levelshift1
            //&& ADX_Levelshift1 >ADX_Levelshift2
            //&& ADX_Levelshift2 >ADX_Levelshift3
            && ADX_MINUSDI_Level > ADX_MODE_PLUSDI_Level
            && Volume1 > Volume2
            //&& Volume2 > Volume3
           )
           {
            res=OrderSend(Symbol(),OP_SELL,Lots,Bid,3,trailing_stop_SELL_set,TakeProfit_SELL_set,"",MAGICMA,0,Red);
            Alert(" Sell trade:",res," placed at Bid price of:",Bid);
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Check for close order conditions                                 |
//+------------------------------------------------------------------+
void CheckForClose()
  {
//--- get Moving Average
   double fiveminEMA = iMA(NULL,PERIOD_M1,MovingPeriodOne,0,MODE_EMA,PRICE_CLOSE,0);
   double fifteenMinEMa = iMA(NULL,PERIOD_M1,MovingPeriodTwo,0,MODE_EMA,PRICE_CLOSE,0);

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderMagicNumber()!=MAGICMA || OrderSymbol()!=Symbol())
         continue;
      //--- check order type
      if(OrderType()==OP_BUY)
        {
         if(fiveminEMA < fifteenMinEMa)
           {
            if(!OrderClose(OrderTicket(),OrderLots(),Bid,3,White))
               Print("OrderClose error ",GetLastError());
           }
         break;
        }
      if(OrderType()==OP_SELL)
        {
         if(fiveminEMA > fifteenMinEMa)
           {
            if(!OrderClose(OrderTicket(),OrderLots(),Ask,3,White))
               Print("OrderClose error ",GetLastError());
           }
         break;
        }
     }
  }
//+------------------------------------------------------------------+
//|  Trailing stop                                                   |
//+------------------------------------------------------------------+
int  updated_existing_ticket_stop_loss(double NEW_STOP_LOSS_VALUE_FOR_OPEN_ORDER)
  {
   int open_ticket = get_my_open_order();
   if(open_ticket <= 0)
     {
      return(-1);
     }
   else
     {
      //Print("I am updating stoploss on ticket #",open_ticket);
      if(OrderSelect(open_ticket,SELECT_BY_TICKET) == false)
        {
         Print("updated_existing_ticket_stop_loss> Error in OrderSelect. Error code=",GetLastError());
         return(-2);
        }
      else
        {

         double previous_stop_loss_value = OrderStopLoss();
         //Print("existing ticket found. updating it from: ", previous_stop_loss_value," to: ", NEW_STOP_LOSS_VALUE_FOR_OPEN_ORDER);
         if(OrderModify(OrderTicket(),OrderOpenPrice(), NEW_STOP_LOSS_VALUE_FOR_OPEN_ORDER,OrderTakeProfit(),OrderExpiration(),Blue) == true)
           {
            //Print("Order Ticket #", open_ticket," successfully updated from stop loss value of: ", previous_stop_loss_value,  " to stop loss value of: ", NEW_STOP_LOSS_VALUE_FOR_OPEN_ORDER);
            return(100);
           }
         else
           {
            //Return true here because even though the update failed, we dont want to execute an order,
            //Print("Error in OrderModify. Error code=",GetLastError());
            return(-2);
           }
         return(-1);
        }
      return(-1);
     }
   return(-1);
  }
//+------------------------------------------------------------------+
//| Get Open Order                                                   |
//+------------------------------------------------------------------+
int get_my_open_order()
  {
   int total=OrdersTotal();
//Print("There are ",total,"open orders......");
   if(total==0)
      return(0);
   for(int pos=0; pos<total; pos++)
     {
      if(OrderSelect(pos,SELECT_BY_POS)==false)
        {
         Print("get_my_open_order> OrderSelect Error: ", GetLastError());
         continue;

        }
      int my_open_order_ticket = OrderTicket();

      //Print("I am returning ticket #",my_open_order_ticket);
      return(my_open_order_ticket);
     }
   return(0);
  }
//+------------------------------------------------------------------+
//| Get open order type                                                                 |
//+------------------------------------------------------------------+
int get_open_order_type()
  {
   return(get_order_type_by_id(get_my_open_order()));
  }
//+------------------------------------------------------------------+
//| Get order type by id                                               |
//+------------------------------------------------------------------+
int get_order_type_by_id(int order_id)
  {
   int order_type;
   if(order_id<=0)
      return(-100);
   if(OrderSelect(order_id, SELECT_BY_TICKET)==true)
     {
      order_type=OrderType();
      //Print("The order type of order id #", order_id," is: ",order_type);
      return(order_type);
     }
   else
     {
      Print("get_order_type_by_id> OrderSelect() returned error - ",GetLastError());
      return -1;
     }
  }
//+------------------------------------------------------------------+
//| OnTick function                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
//--- Get Moving Average
   double fifteenMinEMa = iMA(NULL,PERIOD_M1,MovingPeriodTwo,0,MODE_EMA,PRICE_CLOSE,0);



//--- check for history and trading
   if(Bars<100 || IsTradeAllowed()==false)
      return;
//if(Bars != ThisBarTrade)
//{
//ThisBarTrade = Bars;  // ensure only one trade opportunity per bar
   if(CalculateCurrentOrders(Symbol())==0)
      CheckForOpen();
   else
      CheckForClose();
// }

   int open_ticket = get_my_open_order();
   if(open_ticket <= 0)
     {
      //Print("There are NO open BUY orders. get_my_open_order() returns", get_my_open_order());
     }
   else
     {
      if(OrderSelect(open_ticket,SELECT_BY_TICKET) == false)
        {
         //Print("updated_existing_BUY_ticket_stop_loss> Error in OrderSelect. Error code=",GetLastError());
        }
      else
        {
         //Print("Order select current order open ticket is:...........................",open_ticket);
        }
      if(get_open_order_type() == OP_BUY)
        {
         double current_TP_BUY = OrderStopLoss();
         double fiveMinut_fourHour_trailing_stop = fifteenMinEMa;
         double BID_trailing_stop_BUY6 = Bid - (MathAbs(Ask - Bid)*5);
         double breakEven_BUY = OrderOpenPrice() + (MathAbs(Ask - Bid)+ 20);

         if(current_TP_BUY >= fiveMinut_fourHour_trailing_stop)
            return;
         if(current_TP_BUY < fiveMinut_fourHour_trailing_stop)
           {
            if(updated_existing_ticket_stop_loss(fiveMinut_fourHour_trailing_stop) == 100)
              {
               return;
              }
           }
        }
     }


   if(open_ticket <= 0)
     {
      //Print("There are NO open SELL orders. get_my_open_order() returns", get_my_open_order());
     }
   else
     {
      if(OrderSelect(open_ticket,SELECT_BY_TICKET) == false)
        {
         //Print("updated_existing_SELL_ticket_stop_loss> Error in OrderSelect. Error code=",GetLastError());
        }
      else
        {
         //Print("Order select current order open ticket is:...........................",open_ticket);
        }

      if(get_open_order_type() == OP_SELL)
        {
         double current_TP_SELL = OrderStopLoss();
         double fiveMinut_fourHour_trailing_stop_SELL = fifteenMinEMa + MathAbs(Ask - Bid);
         double trailing_stop_SELL6 = Bid + (MathAbs(Ask - Bid)*1);
         double breakEven_SELL = OrderOpenPrice() - (MathAbs(Ask - Bid)- 1);

         if(current_TP_SELL <= fiveMinut_fourHour_trailing_stop_SELL)
            return;
         if(current_TP_SELL > fiveMinut_fourHour_trailing_stop_SELL)
           {
            if(updated_existing_ticket_stop_loss(fiveMinut_fourHour_trailing_stop_SELL) == 100)
              {
               return;
              }
           }
        }
     }

   double CheckNews=0;
   if(AfterNewsStop>0)
     {
      if(TimeCurrent()-LastUpd>=((Upd*60)*60))
        {
         Comment("News Loading...");
         Print("News Loading...");
         UpdateNews();
         LastUpd=TimeCurrent();
         Comment("");
        }
      WindowRedraw();
      //---Draw a line on the chart news--------------------------------------------
      if(DrawLines)
        {
         for(int i=0; i<NomNews; i++)
           {
            string Name=StringSubstr(TimeToStr(TimeNewsFunck(i),TIME_MINUTES)+"_"+NewsArr[1][i]+"_"+NewsArr[3][i],0,63);
            if(NewsArr[3][i]!="")
               if(ObjectFind(Name)==0)
                  continue;
            if(StringFind(str1,NewsArr[1][i])<0)
               continue;
            if(TimeNewsFunck(i)<TimeCurrent() && Next)
               continue;

            color clrf = clrNONE;
            if(Vhigh && StringFind(NewsArr[2][i],"High")>=0)
               clrf=highc;
            if(Vmedium && StringFind(NewsArr[2][i],"Moderate")>=0)
               clrf=mediumc;
            if(Vlow && StringFind(NewsArr[2][i],"Low")>=0)
               clrf=lowc;

            if(clrf==clrNONE)
               continue;

            if(NewsArr[3][i]!="")
              {
               ObjectCreate(Name,0,OBJ_VLINE,TimeNewsFunck(i),0);
               ObjectSet(Name,OBJPROP_COLOR,clrf);
               ObjectSet(Name,OBJPROP_STYLE,Style);
               ObjectSetInteger(0,Name,OBJPROP_BACK,true);
              }
           }
        }
      //---------------event Processing------------------------------------
      CheckNews=0;
      for(i=0; i<NomNews; i++)
        {
         int power=0;
         if(Vhigh && StringFind(NewsArr[2][i],"High")>=0)
            power=1;
         if(Vmedium && StringFind(NewsArr[2][i],"Moderate")>=0)
            power=2;
         if(Vlow && StringFind(NewsArr[2][i],"Low")>=0)
            power=3;
         if(power==0)
            continue;
         if(TimeCurrent()+MinBefore*60>TimeNewsFunck(i) && TimeCurrent()-MinAfter*60<TimeNewsFunck(i) && StringFind(str1,NewsArr[1][i])>=0)
           {
            CheckNews=1;
            break;
           }
         else
            CheckNews=0;
        }

      if(CheckNews==1 && i!=Now && Signal)
        {
         Alert("In ",(int)(TimeNewsFunck(i)-TimeCurrent())/60," minutes released news ",NewsArr[1][i],"_",NewsArr[3][i]);
         Now=i;
        }
      /***  ***/
     }

   if(CheckNews>0)
     {
      Comment("News is high impact, we will stop searching for trading oportunities fro the next 10 minutes");
      Sleep(60000*NewsSleepTime);
     }
   else
     {
      // We are out of scope of the news release (No News)
      Comment("No high impact news, we will continue searching for trading oportunities");

     }
  }

//+------------------------------------------------------------------+
// Download CBOE page source code in a text variable                 |
// And returns the result                                            |
//+------------------------------------------------------------------+
string ReadCBOE()
  {

   string cookie=NULL,headers;
   char post[],result[];
   string TXT="";
   int res;
//--- to work with the server, you must add the URL "https://www.google.com/finance"
//--- the list of allowed URL (Main menu-> Tools-> Settings tab "Advisors"):
   string google_url="http://ec.forexprostools.com/?columns=exc_currency,exc_importance&importance=1,2,3&calType=week&timeZone=15&lang=1";
//---
   ResetLastError();
//--- download html-pages
   int timeout=5000; //--- timeout less than 1,000 (1 sec.) is insufficient at a low speed of the Internet
   res=WebRequest("GET",google_url,cookie,NULL,timeout,post,0,result,headers);
//--- error checking
   if(res==-1)
     {
      Print("WebRequest error, err.code  =",GetLastError());
      MessageBox("You must add the address ' "+google_url+"' in the list of allowed URL tab 'Advisors' "," Error ",MB_ICONINFORMATION);
      //--- You must add the address ' "+ google url"' in the list of allowed URL tab 'Advisors' "," Error "
     }
   else
     {
      //--- successful download
      //PrintFormat("File successfully downloaded, the file size in bytes  =%d.",ArraySize(result));
      //--- save the data in the file
      int filehandle=FileOpen("news-log.html",FILE_WRITE|FILE_BIN);
      //--- ???????? ??????
      if(filehandle!=INVALID_HANDLE)
        {
         //---save the contents of the array result [] in file
         FileWriteArray(filehandle,result,0,ArraySize(result));
         //--- close file
         FileClose(filehandle);

         int filehandle2=FileOpen("news-log.html",FILE_READ|FILE_BIN);
         TXT=FileReadString(filehandle2,ArraySize(result));
         FileClose(filehandle2);
        }
      else
        {
         Print("Error in FileOpen. Error code =",GetLastError());
        }
     }

   return(TXT);
  }
//+------------------------------------------------------------------+
// News date time function                                           |
//+------------------------------------------------------------------+
datetime TimeNewsFunck(int nomf)
  {
   string s=NewsArr[0][nomf];
   string time=StringConcatenate(StringSubstr(s,0,4),".",StringSubstr(s,5,2),".",StringSubstr(s,8,2)," ",StringSubstr(s,11,2),":",StringSubstr(s,14,4));
   return((datetime)(StringToTime(time) + offset*3600));
  }
//+------------------------------------------------------------------+
// Update News function                                              |
//+------------------------------------------------------------------+
void UpdateNews()
  {
   string TEXT=ReadCBOE();
   int sh = StringFind(TEXT,"pageStartAt>")+12;
   int sh2= StringFind(TEXT,"</tbody>");
   TEXT=StringSubstr(TEXT,sh,sh2-sh);

   sh=0;
   while(!IsStopped())
     {
      sh = StringFind(TEXT,"event_timestamp",sh)+17;
      sh2= StringFind(TEXT,"onclick",sh)-2;
      if(sh<17 || sh2<0)
         break;
      NewsArr[0][NomNews]=StringSubstr(TEXT,sh,sh2-sh);

      sh = StringFind(TEXT,"flagCur",sh)+10;
      sh2= sh+3;
      if(sh<10 || sh2<3)
         break;
      NewsArr[1][NomNews]=StringSubstr(TEXT,sh,sh2-sh);
      if(StringFind(str1,NewsArr[1][NomNews])<0)
         continue;

      sh = StringFind(TEXT,"title",sh)+7;
      sh2= StringFind(TEXT,"Volatility",sh)-1;
      if(sh<7 || sh2<0)
         break;
      NewsArr[2][NomNews]=StringSubstr(TEXT,sh,sh2-sh);
      if(StringFind(NewsArr[2][NomNews],"High")>=0 && !Vhigh)
         continue;
      if(StringFind(NewsArr[2][NomNews],"Moderate")>=0 && !Vmedium)
         continue;
      if(StringFind(NewsArr[2][NomNews],"Low")>=0 && !Vlow)
         continue;

      sh=StringFind(TEXT,"left event",sh)+12;
      int sh1=StringFind(TEXT,"Speaks",sh);
      sh2=StringFind(TEXT,"<",sh);
      if(sh<12 || sh2<0)
         break;
      if(sh1<0 || sh1>sh2)
         NewsArr[3][NomNews]=StringSubstr(TEXT,sh,sh2-sh);
      else
         NewsArr[3][NomNews]=StringSubstr(TEXT,sh,sh1-sh);

      NomNews++;
      if(NomNews==300)
         break;
     }
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
